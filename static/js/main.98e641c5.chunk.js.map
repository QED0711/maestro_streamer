{"version":3,"sources":["state/main/state.js","state/main/setters.js","state/main/methods.js","state/main/mainProvider.js","helpers/parseQueryString.js","components/MediaPanel.js","components/SessionWindow.js","helpers/socket.js","components/ConnectionManager.js","components/ConfigPanel.js","App.js","serviceWorker.js","index.js","logo.svg","../node_modules/peerjs/dist sync"],"names":["state","authority","knownAuthorities","sessionAuthorization","ring","userID","connectedUsers","localStreamID","streams","streamsData","showIDs","setters","appendStream","stream","source","this","setStateMaster","prevState","map","id","includes","push","appendStreamData","streamID","data","appendKnownAuthority","authorityLevel","removeStream","filter","appendUser","toggleRing","methods","getAuthority","getKnownAuthorites","getRing","getUserID","getConnectedUsers","main","Multistate","addCustomSetters","addMethods","mainContext","context","MainProvider","createProvider","parseQueryString","queryString","val","params","URLSearchParams","obj","keys","key","getAll","length","get","parseFloat","MediaPanel","useContext","queryParams","window","location","search","useEffect","video","forEach","document","getElementById","paused","muted","controls","srcObject","addEventListener","play","e","preventDefault","altKey","addStreamsToVideos","className","name","SessionWindow","props","useParams","sessionID","to","SERVER_HOST","process","REACT_APP_SERVER_HOST","config","server_host","hostname","SERVER_PORT","REACT_APP_SERVER_PORT","server_port","SERVER_PROTOCOL","REACT_APP_SERVER_PROTOCOL","server_protocol","socket","io","DEFAULT_AUDIO_SETTINGS","autoGainControl","exact","echoCancellation","noiseSuppression","sampleSize","channelCount","ConnectionManager","setAuthority","console","log","setShowIDs","peer","Peer","undefined","path","host","on","setUserID","emit","part","navigator","mediaDevices","getUserMedia","audio","then","rawStream","handlePageUnload","call","metadata","answer","userVideoStream","remoteAuthority","ConfigPanel","handleRingClick","a","ringInterval","setInterval","clearInterval","onClick","App","basename","Boolean","match","ReactDOM","render","serviceWorker","ready","registration","unregister","catch","error","message","module","exports","webpackEmptyContext","req","Error","code","resolve"],"mappings":"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","file":"static/js/main.98e641c5.chunk.js","sourcesContent":["\nconst state = {\n\n    authority: null,\n    knownAuthorities: {},\n    \n    sessionAuthorization: true,\n    ring: false,\n    \n    userID: null,\n    connectedUsers: [],\n    localStreamID: null,\n    streams: [],\n    streamsData: {},\n\n    showIDs: false,\n\n\n}\n\nexport default state;\n","const setters = {\n\n    appendStream(stream, source=null){\n        this.setStateMaster(prevState => {\n            // 1. append string to streams state\n            const streams = [...prevState.streams]\n            const streamIDs = streams.map(stream => stream.id)\n            // const streams = [...this.state.streams]\n            if(!streamIDs.includes(stream.id)) streams.push(stream)\n\n            // 2. if the stream source is the local stream, set the localStreamID\n            if(source === \"local\") return {streams, localStreamID: stream.id}\n \n            // else, just set streams\n            return {streams}\n        })\n    },\n\n    appendStreamData(streamID, data){\n        this.setStateMaster(prevState => {\n            const streamsData = {...prevState.streamsData}\n\n            streamsData[streamID] = data\n\n            return {streamsData}\n\n        })\n    },\n\n    appendKnownAuthority(userID, authorityLevel){\n        this.setStateMaster(prevState => {\n            const knownAuthorities = {...prevState.knownAuthorities}\n\n            knownAuthorities[userID] = authorityLevel\n            return {knownAuthorities}\n\n        })\n    },\n\n    removeStream(streamID){\n        this.setStateMaster(prevState => {\n\n            let streams = [...prevState.streams]\n            streams = streams.filter(stream => streamID !== stream.id)\n\n            return {streams}\n        })\n    },\n\n    appendUser(userID){\n        this.setStateMaster(prevState => {\n            let connectedUsers = [...prevState.connectedUsers];\n            connectedUsers.push(userID)\n            return {connectedUsers}\n        })\n    },\n\n    toggleRing(){\n        this.setStateMaster(prevState => {\n            return {ring: !prevState.ring}\n        })\n    }\n\n}\n\nexport default setters;\n","\nconst methods = {\n\n    getAuthority(){\n        return this.state.authority\n    },\n\n    getKnownAuthorites(){\n        return this.state.knownAuthorities\n    },\n\n    getRing(){\n        return this.state.ring;\n    },\n\n    getUserID(){\n        return this.state.userID;\n    },\n\n    getConnectedUsers(){\n        return this.state.connectedUsers;\n    }\n\n}\n\nexport default methods;\n","\nimport Multistate from 'multistate';\n\nimport state from './state'\nimport setters from './setters'\nimport methods from './methods'\n\n\nconst main = new Multistate(state)\n\nmain.addCustomSetters(setters)\nmain.addMethods(methods)\n\n\n\nexport const mainContext = main.context;\nexport const MainProvider = main.createProvider();\n\n","\nconst parseQueryString = (queryString) => {\n    // parse query string\n    const params = new URLSearchParams(queryString);\n\n    const obj = {};\n\n    // iterate over all keys\n    let val;\n    for (const key of params.keys()) {\n        if (params.getAll(key).length > 1) {\n            val = params.getAll(key);\n        } else {\n            val = params.get(key);\n        }\n\n        // handle numbers\n        if([\"0\", \"0.0.\"].includes(val) || parseFloat(val)) val = parseFloat(val)\n\n        // handle booleans\n        if(val === \"false\") val = false;\n        if(val === \"true\") val = true;\n\n        obj[key] = val\n    }\n    return obj\n}\n\n\n\nexport default parseQueryString","import React, { useContext, useEffect } from 'react';\n\nimport \"../css/media-panel.css\"\n\n// =========================== STATE ===========================\nimport { mainContext } from '../state/main/mainProvider';\n\n// =========================== HELPERS ===========================\nimport parseQueryString from '../helpers/parseQueryString';\n\nconst MediaPanel = () => {\n\n    const { state, setters } = useContext(mainContext);\n    const queryParams = parseQueryString(window.location.search);\n\n\n    const renderVideos = (streams) => {\n        \n\n        return streams.map(stream => {\n            return (\n                <div className=\"video-container\" key={stream.id} id={stream.id}>\n\n                    {/* <p>{stream.id}</p> */}\n\n                    <h3 className=\"video-header user-name\">\n                        {\n                            state.localStreamID === stream.id\n                                ? queryParams.name\n                                : state.streamsData[stream.id]?.name || \"--\"\n                        }\n                    </h3>\n\n                    <h4 className=\"video-header user-location\">\n                        {\n                            state.localStreamID === stream.id\n                                ? queryParams.location\n                                : state.streamsData[stream.id]?.location || \"--\"\n                        }\n                    </h4>\n                    <video id={`video-${stream.id}`}></video>\n                    {state.showIDs && <em><sub className=\"sub-id\">{stream.id}</sub></em>}\n                </div>\n            )\n        })\n\n\n    }\n\n    useEffect(() => {\n        const addStreamsToVideos = () => {\n            let video;\n            state.streams.forEach(stream => {\n                video = document.getElementById(`video-${stream.id}`)\n\n                if (!video.paused) return // break out early\n\n                video.muted = stream.id === state.localStreamID // mute only the local stream\n                video.controls = \"controls\"\n                video.srcObject = stream;\n\n                video.addEventListener(\"loadedmetadata\", () => {\n                    video.play();\n                })\n\n                video.addEventListener(\"mousedown\", e => {\n                    e.preventDefault()\n                    if (e.altKey) setters.removeStream(stream.id)\n                })\n            })\n        }\n\n        addStreamsToVideos()\n\n    }, [state.streams])\n\n\n    return (\n        <div id=\"media-panel\">\n            {renderVideos(state.streams)}\n        </div>\n    )\n\n}\n\nexport default MediaPanel;","import React, { useContext } from 'react';\n\nimport {useParams, Redirect} from 'react-router-dom';\n\n// ====================== STATE ======================\nimport { mainContext } from '../state/main/mainProvider';\n\n// ====================== CHILDREN ======================\nimport MediaPanel from './MediaPanel';\n\nconst SessionWindow = (props) => {\n    \n    const {state} = useContext(mainContext);\n    const {sessionID} = useParams();\n    \n\n\n    if(!state.sessionAuthorization) return <Redirect to=\"/\" />\n\n    return (\n        <div id=\"session-window\">\n            <MediaPanel />\n        </div>\n    )\n}\n\nexport default SessionWindow;","import io from \"socket.io-client\";\nimport config from '../config.json';\n\nconst SERVER_HOST = process.env.REACT_APP_SERVER_HOST || config.server_host || window.location.hostname;\nconst SERVER_PORT = process.env.REACT_APP_SERVER_PORT || config.server_port;\nconst SERVER_PROTOCOL = process.env.REACT_APP_SERVER_PROTOCOL || config.server_protocol || \"https\"\n\nconst SERVER_URL = `${SERVER_PROTOCOL}://${SERVER_HOST}:${SERVER_PORT}/`\n\n// const socket = io(SERVER_URL, {transports: ['websocket'], rejectUnauthorized: false});\nconst socket = io(\"https://maestrostreamer.com\",);\n\nexport default socket;\n\n","import React, { useEffect, useContext } from 'react';\nimport { useParams, useRouteMatch } from 'react-router-dom';\nimport Peer from 'peerjs'\n\n// ========================= STATE =========================\nimport { mainContext } from '../state/main/mainProvider';\n\n// ========================= HELPERS =========================\nimport socket from '../helpers/socket';\nimport parseQueryString from '../helpers/parseQueryString'\n\n// ========================= CONFIG =========================\nimport config from '../config.json'\n\nconst DEFAULT_AUDIO_SETTINGS = {\n    autoGainControl: { exact: false },\n    echoCancellation: { exact: false },\n    noiseSuppression: false,\n    sampleSize: { exact: 16 },\n    channelCount: 1\n}\n\nconst ConnectionManager = () => {\n\n    const { state, setters, methods } = useContext(mainContext);\n    const { sessionID, name, location } = useParams()\n\n\n\n\n\n    useEffect(() => {\n\n        const queryParams = parseQueryString(window.location.search)\n\n        setters.setAuthority(queryParams.authority || 'basic')\n\n        console.log(queryParams)\n\n\n\n        queryParams.showIDs && setters.setShowIDs(true)\n\n        // 1. Peer initialization\n        const peer = new Peer(undefined, {\n            path: \"/peerjs\",\n            host: config.server_host,\n            // port: 80,\n            // secure: true\n            // debug: 3\n        })\n\n\n        peer.on(\"open\", id => {\n            setters.setUserID(id)\n            // console.log({ id, peer })\n            // console.log(\"PEER OPENING\")\n            socket.emit(\"join-session\", { sessionID, userID: id, part: \"PART STAND-IN\" })\n        })\n\n\n        // 2. getting media devices\n        navigator.mediaDevices.getUserMedia({\n            video: queryParams.video === false ? false : true,\n            audio: queryParams.audio === false ? false : {\n                ...DEFAULT_AUDIO_SETTINGS,\n                ...queryParams\n            }\n        }).then(rawStream => {\n                // var ctx = new AudioContext();\n                // var source = ctx.createMediaStreamSource(rawStream);\n                // var dest = ctx.createMediaStreamDestination();\n                // var gainNode = ctx.createGain();\n                // console.log({rawStream, source, dest})\n\n                // source.connect(gainNode);\n                // gainNode.connect(dest);\n\n                // gainNode.gain.value = 0.9\n\n                setters.appendStream(rawStream, \"local\") // this propagates down and adds video to dom\n\n                // HANDLE UNLOAD\n                // if the session the person who started the session leaves, these unload event handlers will inform other session members of their departure so they can clean up any stale user data.\n                const handlePageUnload = e => {\n                    socket.emit(\"user-leaving\", { streamID: rawStream.id })\n                }\n\n                window.addEventListener(\"unload\", handlePageUnload)\n                window.addEventListener(\"beforeunload\", handlePageUnload)\n\n                peer.on(\"call\", call => {\n                    \n                    /* \n                    IF STATEMENT:\n                        - if the person calling me is an admin, I will answer with my stream regardless of my own authority\n                        - if I am an admin, I will respond with my stream to the person calling me regardless of their authority\n                    \n                    */\n                    if(methods.getAuthority() === \"admin\" || call.metadata.authority === \"admin\"){\n                        call.answer(rawStream)\n                    } else {\n                        call.answer(null)\n                    }\n                    // const video = document.createElement(\"video\")\n                    // video.muted = true;\n\n\n                    call.on(\"stream\", userVideoStream => {\n                        // userVideoStreams are from users who were already connected\n                        socket.emit(\"request-user-data\", { streamID: userVideoStream.id }) // requests data from the user based on their stream id\n                        setters.appendStream(userVideoStream)\n                        // addVideoStream(video, userVideoStream)\n                    })\n\n                    // call.on(\"close\", () => {\n                    //     console.log(\"REMOVING\")\n                    //     // video.parentElement.remove()\n                    //     // video.remove()\n                    // })\n                })\n\n                socket.on(\"user-connected\", ({ userID, authority: remoteAuthority }) => {\n                    // this function will call and provide YOUR STREAM to another user\n\n                    console.log(`RING: ${remoteAuthority},${userID}`)\n                    console.log(\"CONNECTED USERS\", methods.getConnectedUsers())\n\n\n                    /* \n                    IF STATEMENT\n                        - if we have not already connected to you, we will send out stream.\n                        - ONLY IF\n                        - you are an admin or monitor, or I am an admin\n                            - effectively, if I am a performer, I will only send you my stream if you have a higher authority than me\n                    */\n\n                    if (\n                        !methods.getConnectedUsers().includes(userID)\n                        && ([\"admin\", \"monitor\"].includes(remoteAuthority) || methods.getAuthority() === \"admin\") \n                    ) { \n\n\n\n                        // 1. mark the user as seen\n                        setters.appendKnownAuthority(userID, remoteAuthority)\n\n\n                        // 2. call the user using their ID, and send them your stream\n                        const call = peer.call(userID, rawStream, {metadata: {authority: methods.getAuthority()}})\n\n                        setters.appendUser(userID);\n                        // call.open && setters.appendUser(userID);\n                        // console.log(call.open)\n\n                        call.on(\"stream\", userVideoStream => {\n                            setters.appendStream(userVideoStream)\n                            // addVideoStream(video, userVideoStream, part)\n                        })\n                    }\n                })\n\n                socket.on(\"data-requested\", (data) => { // responds to data requests based on own stream id\n                    if (data.streamID === rawStream.id) {\n                        socket.emit(\"data-response\", { streamID: rawStream.id, ...queryParams })\n                    }\n                })\n\n            })\n\n\n        // secondary scope\n        socket.on(\"user-data-response\", data => {\n            setters.appendStreamData(data.streamID, data)\n        })\n\n        socket.on(\"user-disconnected\", userID => {\n            // peers[userID] && peers[userID].close()\n        })\n\n        socket.on(\"remove-stale-user\", data => {\n            console.log(\"WILL REMOVE STALE USER\")\n            console.log(data)\n            setters.removeStream(data.streamID)\n            // const staleStream = document.getElementById(data.streamID)\n            // staleStream.remove()\n        })\n\n\n        /* \n        /////////////////////////////////////////////////////\n        NOTES: Somewhere (maybe not in this component) there needs to be an interval that calls all users in the socket room.\n        This interval should be triggered by a button press, and can be stopped by the same button press\n        In this interval, if a call is not open, it halts there and tries again at the next interval until the call is open\n        /////////////////////////////////////////////////////        \n        */\n\n\n    }, [])\n\n    return <></>\n\n}\n\nexport default ConnectionManager;","import React, { useContext, useEffect } from 'react';\n\n// ============================ STATE ============================\nimport { mainContext } from \"../state/main/mainProvider\"\n\n// ============================ HELPERS ============================\nimport socket from '../helpers/socket'\nimport { useParams } from 'react-router-dom';\n\nconst ConfigPanel = () => {\n\n    // STATE\n    const { state, setters, methods } = useContext(mainContext)\n    const {sessionID} = useParams()\n\n    // EVENTS\n    const handleRingClick = async e => {\n        setters.toggleRing()\n\n\n\n    }\n\n    useEffect(() => {\n\n        if (state.ring) {\n            const ringInterval = setInterval(() => {\n                const userID = methods.getUserID()\n                const ring = methods.getRing();\n                const authority = methods.getAuthority()\n\n                if (userID) {\n                    ring ? socket.emit(\"ring\", { sessionID, userID, authority }) : clearInterval(ringInterval);\n                }\n            }, 1000)\n        }\n\n    }, [state.ring])\n\n    return (\n        <div id=\"config-panel\">\n\n            <button onClick={handleRingClick}>\n                {\n                    state.ring\n                        ? \"Stop Ringing\"\n                        : \"Ring\"\n                }\n            </button>\n\n        </div>\n    )\n\n}\n\nexport default ConfigPanel","import React, { useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from 'react-router-dom';\nimport SessionWindow from './components/SessionWindow';\nimport ConnectionManager from './components/ConnectionManager';\nimport ConfigPanel from './components/ConfigPanel';\n\n\nfunction App() {\n\n    return (\n        <Router basename={process.env.PUBLIC_URL + '/'}>\n            <div className=\"App\">\n                <Switch>\n                    <Route exact path=\"/\">\n                        Maestro Streamer\n                        {/* <Redirect to={\"/session/umd\"} /> */}\n                        {/* <Link to=\"/session/123\">LINK</Link> */}\n                    </Route>\n\n                    <Route exact path=\"/session/:sessionID\">\n                        <ConnectionManager />\n                        <ConfigPanel />\n                        <SessionWindow />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {MainProvider} from \"./state/main/mainProvider\";\n\nReactDOM.render(\n  <MainProvider>\n    <App />\n  </MainProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 67;"],"sourceRoot":""}